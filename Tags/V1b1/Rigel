#!/usr/bin/env perl

#
# Rigel - an RSS to IMAP Gateway
#
# Copyright (C) 2004 Taku Kudo <taku@chasen.org>
#               2005 Yoshinari Takaoka <mumumu@mumumu.org>
#		2008 Greg Ross <greg@darkphoton.com>
#     All rights reserved.
#     This is free software with ABSOLUTELY NO WARRANTY.
#
# You can redistribute it and/or modify it under the terms of the
# GPL2, GNU General Public License version 2.
#

#
# This is the main Rigel script, it is responsible for inital
# setup and calling of the subfunctions as required.
#

use strict;
use POSIX qw(setsid);
use RIGELLIB::Config;
use RIGELLIB::Rigel;
use RIGELLIB::Common;
use Data::Dumper;

package main;

sub show_usage {
    print <<"EOS"

Usage: Rigel [options]

-s,  --host=HOST           use HOST as an IMAP host [localhost]
-P,  --port=INT            use INT as a port number [143]
-u,  --user=USER           use USER as a user name [$ENV{USER}]
     --password=PASSWORD   use PASSWORD as your password
-p,  --prefix=PREFIX       use PREFIX as a folder prefix name []
                           set "INBOX" when you use courier-imap
-m,  --last-modified-folder=FOLDER
                           use "FOLDER" as the last-modified-folder
-c,  --cram-md5            use cram-md5 authentication
-o,  --once                run once and exit
-n,  --nodaemon            run as a foreground process 
-i,  --interval=MIN        run at MIN intervals [30]
     --proxy=HOST          use HOST as a http proxy
     --proxy-user=USER     use proxy username
     --proxy-pass=PASS     use proxy password
-S   --use-ssl             use Secure Socket Layer(SSL)
-e   --encrypt             encrypt a string (used for passwords)
-d   --delivery-mode=MODE  mail delivery mode.
                           MODE is "text"(default) or "html"
-f   --configfile          Location and name of the configuration file.
-h   --help                this help.
-v   --version             version info.

EOS
;
    exit();
}


sub main {
    $| = 1; select (STDERR); $| = 1; select (STDOUT);
    my $config_obj = RIGELLIB::Config->new();
    my $rigel = new RIGELLIB::Rigel($config_obj);
    my %config = %{$config_obj->get_global_configall()};
    my $version = $config_obj->get_version();
    my @config_list = @{$config{'list'}};

    #    print version
    if ( $config{version} ) {
	print  "Rigel $version\n";
        exit();
    }

    print Data::Dumper::Dumper( \%config ) if ($config{'debug'});
    print Data::Dumper::Dumper( $config_obj->get_site_configall() ) if ($config{'debug'});

    show_usage () if ($config{help});

    #   Welcome message.
    print "* Welcome to Rigel $version!\n";

    #    import, export process.
    #    option import accepts one filename
    #    execute and exit.
    $config_obj->import_file($config_list[0]) if ($config{import});
    $config_obj->export_file(@config_list) if ($config{export});

    #   prompt imap password (and proxy password if enabled)
    unless ($config{'password'}) {
	print "You require authentication ...\n";
        my $common = RIGELLIB::Common->new();
        $common->getProxyPass_ifEnabled();
        $RIGELLIB::Rigel::GLOBAL_CONFIG->{password} = $common->getPass('imap password: ');
    }

    #    finally do something!
    if ($config{encrypt}) {

	$rigel->encrypt();

    } elsif ($config{once_p} || $config{debug}) {

        $rigel->run();

    } else {

        {
            # invoke once to check whether given parameters are OK
            $rigel->connect_test();
        }

        unless (defined $config{nodaemon}) {
            print "started rssimap daemon...\n";
            print "update interval: $config{interval} minutes\n";

            exit() if fork();
            setsid() if ( $^O !~ /Win32/ );
            umask(022);
            open (STDIN, '/dev/null') or die;
            open (STDOUT, '>>/dev/null') or die;
            open (STDERR, '>>/dev/null') or die;
        }

        while (1) {
            eval {
                $rigel->run();
            };
            sleep $config{interval} * 60;
        }
    }
}

main ();
